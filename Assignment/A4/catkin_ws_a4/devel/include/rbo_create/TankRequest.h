// Generated by gencpp from file rbo_create/TankRequest.msg
// DO NOT EDIT!


#ifndef RBO_CREATE_MESSAGE_TANKREQUEST_H
#define RBO_CREATE_MESSAGE_TANKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rbo_create
{
template <class ContainerAllocator>
struct TankRequest_
{
  typedef TankRequest_<ContainerAllocator> Type;

  TankRequest_()
    : left(0)
    , right(0)  {
    }
  TankRequest_(const ContainerAllocator& _alloc)
    : left(0)
    , right(0)  {
  (void)_alloc;
    }



   typedef int16_t _left_type;
  _left_type left;

   typedef int16_t _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::rbo_create::TankRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbo_create::TankRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TankRequest_

typedef ::rbo_create::TankRequest_<std::allocator<void> > TankRequest;

typedef boost::shared_ptr< ::rbo_create::TankRequest > TankRequestPtr;
typedef boost::shared_ptr< ::rbo_create::TankRequest const> TankRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rbo_create::TankRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rbo_create::TankRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rbo_create::TankRequest_<ContainerAllocator1> & lhs, const ::rbo_create::TankRequest_<ContainerAllocator2> & rhs)
{
  return lhs.left == rhs.left &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rbo_create::TankRequest_<ContainerAllocator1> & lhs, const ::rbo_create::TankRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rbo_create

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rbo_create::TankRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbo_create::TankRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbo_create::TankRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbo_create::TankRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbo_create::TankRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbo_create::TankRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rbo_create::TankRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09d1b2323a1aeae9343e81809a820b60";
  }

  static const char* value(const ::rbo_create::TankRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09d1b2323a1aeae9ULL;
  static const uint64_t static_value2 = 0x343e81809a820b60ULL;
};

template<class ContainerAllocator>
struct DataType< ::rbo_create::TankRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rbo_create/TankRequest";
  }

  static const char* value(const ::rbo_create::TankRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rbo_create::TankRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 left\n"
"int16 right\n"
;
  }

  static const char* value(const ::rbo_create::TankRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rbo_create::TankRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TankRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbo_create::TankRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rbo_create::TankRequest_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RBO_CREATE_MESSAGE_TANKREQUEST_H
