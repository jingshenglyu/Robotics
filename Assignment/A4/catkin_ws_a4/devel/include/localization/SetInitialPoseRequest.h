// Generated by gencpp from file localization/SetInitialPoseRequest.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MESSAGE_SETINITIALPOSEREQUEST_H
#define LOCALIZATION_MESSAGE_SETINITIALPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localization
{
template <class ContainerAllocator>
struct SetInitialPoseRequest_
{
  typedef SetInitialPoseRequest_<ContainerAllocator> Type;

  SetInitialPoseRequest_()
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , var_x(0.0)
    , var_y(0.0)
    , var_theta(0.0)  {
    }
  SetInitialPoseRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , var_x(0.0)
    , var_y(0.0)
    , var_theta(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _var_x_type;
  _var_x_type var_x;

   typedef double _var_y_type;
  _var_y_type var_y;

   typedef double _var_theta_type;
  _var_theta_type var_theta;





  typedef boost::shared_ptr< ::localization::SetInitialPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization::SetInitialPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetInitialPoseRequest_

typedef ::localization::SetInitialPoseRequest_<std::allocator<void> > SetInitialPoseRequest;

typedef boost::shared_ptr< ::localization::SetInitialPoseRequest > SetInitialPoseRequestPtr;
typedef boost::shared_ptr< ::localization::SetInitialPoseRequest const> SetInitialPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization::SetInitialPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization::SetInitialPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::localization::SetInitialPoseRequest_<ContainerAllocator1> & lhs, const ::localization::SetInitialPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta &&
    lhs.var_x == rhs.var_x &&
    lhs.var_y == rhs.var_y &&
    lhs.var_theta == rhs.var_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::localization::SetInitialPoseRequest_<ContainerAllocator1> & lhs, const ::localization::SetInitialPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::SetInitialPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::SetInitialPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::SetInitialPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e51d06c4c070500696986776da1d81d";
  }

  static const char* value(const ::localization::SetInitialPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e51d06c4c070500ULL;
  static const uint64_t static_value2 = 0x696986776da1d81dULL;
};

template<class ContainerAllocator>
struct DataType< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization/SetInitialPoseRequest";
  }

  static const char* value(const ::localization::SetInitialPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 theta\n"
"float64 var_x\n"
"float64 var_y\n"
"float64 var_theta\n"
;
  }

  static const char* value(const ::localization::SetInitialPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.var_x);
      stream.next(m.var_y);
      stream.next(m.var_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetInitialPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization::SetInitialPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization::SetInitialPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "var_x: ";
    Printer<double>::stream(s, indent + "  ", v.var_x);
    s << indent << "var_y: ";
    Printer<double>::stream(s, indent + "  ", v.var_y);
    s << indent << "var_theta: ";
    Printer<double>::stream(s, indent + "  ", v.var_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MESSAGE_SETINITIALPOSEREQUEST_H
